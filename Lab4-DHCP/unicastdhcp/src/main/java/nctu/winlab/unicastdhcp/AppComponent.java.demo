/*
 * Copyright 2020-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nctu.winlab.unicastdhcp;

import static org.onosproject.net.config.NetworkConfigEvent.Type.CONFIG_ADDED;
import static org.onosproject.net.config.NetworkConfigEvent.Type.CONFIG_UPDATED;
import static org.onosproject.net.config.basics.SubjectFactories.APP_SUBJECT_FACTORY;

import java.util.ArrayList;
import java.util.List;

import org.onlab.packet.Ethernet;
import org.onlab.packet.IPv4;
import org.onlab.packet.TpPort;
import org.onlab.packet.UDP;
import org.onosproject.core.ApplicationId;
import org.onosproject.core.CoreService;
import org.onosproject.net.ConnectPoint;
import org.onosproject.net.FilteredConnectPoint;
import org.onosproject.net.config.ConfigFactory;
import org.onosproject.net.config.NetworkConfigEvent;
import org.onosproject.net.config.NetworkConfigListener;
import org.onosproject.net.config.NetworkConfigRegistry;
import org.onosproject.net.flow.DefaultTrafficSelector;
import org.onosproject.net.flow.TrafficSelector;
import org.onosproject.net.intent.Intent;
import org.onosproject.net.intent.IntentService;
import org.onosproject.net.intent.PointToPointIntent;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Sample Network Configuration Service Application. **/
@Component(immediate = true)
public class AppComponent {

  private final Logger log = LoggerFactory.getLogger(getClass());
  private final SrvConfigListener cfgListener = new SrvConfigListener();
  private final ConfigFactory<ApplicationId, SrvConfig> factory = new ConfigFactory<ApplicationId, SrvConfig>(
      APP_SUBJECT_FACTORY, SrvConfig.class, "UnicastDhcpConfig") {
    @Override
    public SrvConfig createConfig() {
      return new SrvConfig();
    }
  };

  private ApplicationId appId;

  @Reference(cardinality = ReferenceCardinality.MANDATORY)
  protected NetworkConfigRegistry cfgService;

  @Reference(cardinality = ReferenceCardinality.MANDATORY)
  protected IntentService intentService;

  @Reference(cardinality = ReferenceCardinality.MANDATORY)
  protected CoreService coreService;

  private ConnectPoint dhcpServer, dhcpClient;
  private List<Intent> installedIntents = new ArrayList<>();

  @Activate
  protected void activate() {
    appId = coreService.registerApplication("nctu.winlab.unicastdhcp");

    cfgService.addListener(cfgListener);
    cfgService.registerConfigFactory(factory);

    log.info("Started");
  }

  @Deactivate
  protected void deactivate() {
    cfgService.removeListener(cfgListener);
    cfgService.unregisterConfigFactory(factory);

    for (Intent intent : installedIntents) {
      intentService.withdraw(intent);
    }

    log.info("Stopped");
  }

  private class SrvConfigListener implements NetworkConfigListener {
    @Override
    public void event(NetworkConfigEvent event) {
      if (!(event.type() == CONFIG_ADDED || event.type() == CONFIG_UPDATED)) {
        return;
      }
      if (!event.configClass().equals(SrvConfig.class)) {
        return;
      }

      SrvConfig config = cfgService.getConfig(appId, SrvConfig.class);
      if (config == null) {
        return;
      }
      dhcpServer = config.srv();
      dhcpClient = config.cli();
      log.info("DHCP server is connected to `{}`, port `{}`",
          dhcpServer.deviceId(), dhcpServer.port());
      log.info("DHCP client is connected to `{}`, port `{}`",
          dhcpClient.deviceId(), dhcpClient.port());

      addRule();
    }
  }


  private void addRule() {
    TrafficSelector.Builder clientSelector = DefaultTrafficSelector.builder()
      .matchEthType(Ethernet.TYPE_IPV4)
      .matchIPProtocol(IPv4.PROTOCOL_UDP)
      .matchUdpSrc(TpPort.tpPort(UDP.DHCP_CLIENT_PORT))
      .matchUdpDst(TpPort.tpPort(UDP.DHCP_SERVER_PORT));

    TrafficSelector.Builder serverSelector = DefaultTrafficSelector.builder()
      .matchEthType(Ethernet.TYPE_IPV4)
      .matchIPProtocol(IPv4.PROTOCOL_UDP)
      .matchUdpSrc(TpPort.tpPort(UDP.DHCP_SERVER_PORT))
      .matchUdpDst(TpPort.tpPort(UDP.DHCP_CLIENT_PORT));

    /* clientIntent: cp -> dhcpServer */
    PointToPointIntent clientIntent = PointToPointIntent.builder()
      .filteredIngressPoint(new FilteredConnectPoint(dhcpClient))
      .filteredEgressPoint(new FilteredConnectPoint(dhcpServer))
      .selector(clientSelector.build())
      .priority(42)
      .appId(appId)
      .build();
    intentService.submit(clientIntent);
    installedIntents.add(clientIntent);
    log.info("Intent `{}`, port `{}` => `{}`, port `{}` is submitted.",  // cp -> dhcpServer
      dhcpClient.deviceId(), dhcpClient.port(), dhcpServer.deviceId(), dhcpServer.port());

    /* serverIntent: dhcpServer -> cp */
    PointToPointIntent serverIntent = PointToPointIntent.builder()
      .filteredIngressPoint(new FilteredConnectPoint(dhcpServer))
      .filteredEgressPoint(new FilteredConnectPoint(dhcpClient))
      .selector(serverSelector.build())
      .priority(42)
      .appId(appId)
      .build();
    intentService.submit(serverIntent);
    installedIntents.add(serverIntent);
    log.info("Intent `{}`, port `{}` => `{}`, port `{}` is submitted.",  // dhcpServer -> cp
      dhcpServer.deviceId(), dhcpServer.port(), dhcpClient.deviceId(), dhcpClient.port());
  }
}
